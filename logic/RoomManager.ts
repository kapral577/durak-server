// logic/RoomManager.ts - –°–ï–†–í–ï–† - –ò–°–ü–†–ê–í–õ–ï–ù–û
import WebSocket from 'ws';
import { Room } from './Room';
import { GameState } from '../types/GameState';
import { Rules } from '../types/Room';
import { startGame } from './startGame';
import { v4 as uuidv4 } from 'uuid';

export class RoomManager {  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù export
  private rooms: Map<string, Room> = new Map();

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CRUD –∫–æ–º–Ω–∞—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  createRoom(name: string, rules: Rules, maxPlayers: number, socket: WebSocket, playerId: string): string {
    const roomId = uuidv4();
    
    if (this.rooms.has(roomId)) {
      console.warn(`‚ö†Ô∏è Room ${roomId} already exists`);
      return roomId;
    }

    const room = new Room(roomId, name, rules, maxPlayers);
    this.rooms.set(roomId, room);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã
    room.addPlayer(socket, playerId);
    
    console.log(`‚úÖ Room ${roomId} created by ${playerId}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
    socket.send(JSON.stringify({
      type: 'room_created',
      room: room.toPublicInfo()
    }));

    this.broadcastRooms();
    return roomId;
  }

  joinRoom(roomId: string, socket: WebSocket, playerId: string): boolean {
    const room = this.rooms.get(roomId);
    if (!room) {
      socket.send(JSON.stringify({
        type: 'error',
        message: `Room ${roomId} not found`
      }));
      return false;
    }

    if (room.isFull()) {
      socket.send(JSON.stringify({
        type: 'error',
        message: `Room ${roomId} is full`
      }));
      return false;
    }

    const success = room.addPlayer(socket, playerId);
    if (success) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
      socket.send(JSON.stringify({
        type: 'room_joined',
        room: room.toPublicInfo(),
        player: room.getPlayer(playerId)
      }));

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
      room.broadcast(JSON.stringify({
        type: 'player_joined',
        player: room.getPlayer(playerId),
        room: room.toPublicInfo()
      }), socket);

      this.broadcastRooms();
    }

    return success;
  }

  leaveRoom(socket: WebSocket, playerId?: string): void {
    for (const room of this.rooms.values()) {
      if (room.removePlayer(socket, playerId)) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
        room.broadcast(JSON.stringify({
          type: 'player_left',
          playerId: playerId,
          room: room.toPublicInfo()
        }));

        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
        if (!room.hasPlayers()) {
          this.rooms.delete(room.id);
          console.log(`üóëÔ∏è Empty room ${room.id} deleted`);
        }

        this.broadcastRooms();
        break;
      }
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ –≤—ã—Ö–æ–¥–µ
    socket.send(JSON.stringify({
      type: 'room_left',
      roomId: playerId
    }));
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å / –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  setReady(roomId: string, playerId: string): void {
    const room = this.rooms.get(roomId);
    if (!room) {
      console.warn(`‚ö†Ô∏è Room ${roomId} not found for setReady`);
      return;
    }

    room.markPlayerReady(playerId);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    room.broadcast(JSON.stringify({
      type: 'player_ready',
      playerId: playerId,
      room: room.toPublicInfo()
    }));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
    this.checkGameStart(room);
  }

  private checkGameStart(room: Room): void {
    const players = room.getPlayers();
    const readyPlayers = players.filter(p => p.isReady);
    
    // –ú–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞, –º–∞–∫—Å–∏–º—É–º —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –∫–æ–º–Ω–∞—Ç—ã
    const canStart = players.length >= 2 && 
                    players.length <= room.maxPlayers &&
                    readyPlayers.length === players.length;

    if (canStart) {
      try {
        const gameState: GameState = startGame({
          roomId: room.id,
          rules: room.rules,
          players: players
        });

        room.setGameState(gameState);
        
        room.broadcast(JSON.stringify({
          type: 'game_started',
          gameState: gameState
        }));

        console.log(`üéÆ Game started in room ${room.id}`);
      } catch (error) {
        console.error(`‚ùå Error starting game in room ${room.id}:`, error);
        room.broadcast(JSON.stringify({
          type: 'error',
          message: 'Failed to start game'
        }));
      }
    }
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  handleGameAction(roomId: string, playerId: string, action: any): void {
    const room = this.rooms.get(roomId);
    if (!room) {
      console.warn(`‚ö†Ô∏è Room ${roomId} not found for game action`);
      return;
    }

    const gameState = room.getGameState();
    if (!gameState) {
      console.warn(`‚ö†Ô∏è No active game in room ${roomId}`);
      return;
    }

    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      room.broadcast(JSON.stringify({
        type: 'game_action',
        playerId: playerId,
        action: action,
        gameState: gameState
      }));

      console.log(`üéÆ Game action in room ${roomId}: ${action.type} by ${playerId}`);
    } catch (error) {
      console.error(`‚ùå Error handling game action in room ${roomId}:`, error);
      room.broadcast(JSON.stringify({
        type: 'error',
        message: 'Invalid game action'
      }));
    }
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  handleMessage(socket: WebSocket, message: any): void {
    const { type, playerId } = message;

    switch (type) {
      case 'create_room':
        this.createRoom(
          message.name,
          message.rules,
          message.rules.maxPlayers,
          socket,
          playerId
        );
        break;

      case 'join_room':
        this.joinRoom(message.roomId, socket, playerId);
        break;

      case 'leave_room':
        this.leaveRoom(socket, playerId);
        break;

      case 'set_ready':
        this.setReady(message.roomId, playerId);
        break;

      case 'start_game':
        // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ö–æ—Å—Ç–∞)
        const room = this.rooms.get(message.roomId);
        if (room) {
          this.checkGameStart(room);
        }
        break;

      case 'game_action':
        this.handleGameAction(message.roomId, playerId, message.action);
        break;

      case 'get_rooms':
        this.sendRoomsList(socket);
        break;

      case 'heartbeat':
        socket.send(JSON.stringify({ type: 'heartbeat_response' }));
        break;

      default:
        console.warn(`‚ö†Ô∏è Unknown message type: ${type}`);
        socket.send(JSON.stringify({
          type: 'error',
          message: `Unknown message type: ${type}`
        }));
    }
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ rooms_list ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  private broadcastRooms(): void {
    const list = this.getRooms();
    const payload = JSON.stringify({ type: 'rooms_list', rooms: list });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    for (const room of this.rooms.values()) {
      room.broadcast(payload);
    }
  }

  sendRoomsList(socket: WebSocket): void {
    const rooms = this.getRooms();
    socket.send(JSON.stringify({
      type: 'rooms_list',
      rooms: rooms
    }));
  }

  getRooms(): any[] {
    return Array.from(this.rooms.values())
      .filter((r) => r.hasPlayers())
      .map((r) => r.toPublicInfo());
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  handleDisconnection(socket: WebSocket): void {
    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –ø–æ —Å–æ–∫–µ—Ç—É –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
    for (const room of this.rooms.values()) {
      const player = room.getPlayerBySocket(socket);
      if (player) {
        console.log(`üîå Player ${player.id} disconnected from room ${room.id}`);
        this.leaveRoom(socket, player.id);
        break;
      }
    }
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  getRoom(roomId: string): Room | undefined {
    return this.rooms.get(roomId);
  }

  getRoomCount(): number {
    return this.rooms.size;
  }

  getActiveRoomCount(): number {
    return Array.from(this.rooms.values()).filter(r => r.hasPlayers()).length;
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  getStats(): any {
    return {
      totalRooms: this.getRoomCount(),
      activeRooms: this.getActiveRoomCount(),
      totalPlayers: Array.from(this.rooms.values()).reduce((sum, room) => sum + room.getPlayerCount(), 0),
      gamesInProgress: Array.from(this.rooms.values()).filter(r => r.getGameState() !== null).length
    };
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ server.ts
export const roomManager = new RoomManager();