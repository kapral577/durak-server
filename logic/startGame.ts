// durak-server/logic/startGame.ts - –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import { GameState, Player, Card, GameRules } from '../shared/types';
import { v4 as uuidv4 } from 'uuid';

export interface StartGameInput {
  roomId: string;
  rules: GameRules; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º GameRules –∏–∑ shared
  players: Player[];
}

export function startGame(input: StartGameInput): GameState {
  const { roomId, rules, players } = input;
  
  if (players.length < 2) {
    throw new Error('Need at least 2 players to start game');
  }

  // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É
  const deck = createDeck();
  shuffleDeck(deck);

  // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
  const cardCount = rules.cardCount;
  const playersWithCards = players.map(player => ({
    ...player,
    hand: deck.splice(0, cardCount), // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - Card[], –Ω–µ string[]
    isReady: true
  }));

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å
  const trump = deck.length > 0 ? deck[deck.length - 1] : null; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - Card –æ–±—ä–µ–∫—Ç
  const trumpSuit = trump?.suit || '‚ô†';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—É –∫–æ–≥–æ –º–ª–∞–¥—à–∏–π –∫–æ–∑—ã—Ä—å)
  let attackerIndex = 0;
  let lowestTrumpValue = Infinity;

  playersWithCards.forEach((player, index) => {
    // ‚úÖ –£–ë–†–ê–ù–´ –ö–û–°–¢–´–õ–¨–ù–´–ï –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò - —Ä–∞–±–æ—Ç–∞–µ–º —Å Card –æ–±—ä–µ–∫—Ç–∞–º–∏
    const trumpCards = player.hand.filter(card => card.suit === trumpSuit);
    
    if (trumpCards.length > 0) {
      const minTrump = Math.min(...trumpCards.map(card => getCardValue(card.rank)));
      if (minTrump < lowestTrumpValue) {
        lowestTrumpValue = minTrump;
        attackerIndex = index;
      }
    }
  });

  const defenderIndex = (attackerIndex + 1) % playersWithCards.length;

  const gameState: GameState = {
    id: uuidv4(), // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä—ã
    roomId,
    phase: 'attack', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞
    players: playersWithCards,
    deck, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - Card[], –Ω–µ string[]
    table: [], // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - TableCard[], –Ω–µ string[]
    trump, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - Card –æ–±—ä–µ–∫—Ç, –Ω–µ string
    trumpSuit,
    currentPlayerId: playersWithCards[attackerIndex].id, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
    currentAttackerIndex: attackerIndex,
    currentDefenderIndex: defenderIndex,
    turn: 1,
    gameMode: rules.gameMode, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –∏–∑ rules
    throwingMode: rules.throwingMode, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –∏–∑ rules
    maxPlayers: rules.maxPlayers, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –∏–∑ rules
    createdAt: Date.now(), // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û timestamp
    updatedAt: Date.now(), // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û timestamp
  };

  if (process.env.NODE_ENV === 'development') {
    console.log(`üéÆ Game started in room ${roomId} with ${players.length} players`);
  }

  return gameState;
}

function createDeck(): Card[] {
  const suits: Card['suit'][] = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
  const ranks: Card['rank'][] = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
  const deck: Card[] = [];

  for (const suit of suits) {
    for (const rank of ranks) {
      deck.push({ 
        id: uuidv4(), // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—Ç—ã
        suit, 
        rank 
      });
    }
  }

  return deck;
}

function shuffleDeck(deck: Card[]): void {
  // Fisher-Yates shuffle –∞–ª–≥–æ—Ä–∏—Ç–º
  for (let i = deck.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [deck[i], deck[j]] = [deck[j], deck[i]];
  }
}

function getCardValue(rank: Card['rank']): number {
  const values: Record<Card['rank'], number> = {
    '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
    'J': 11, 'Q': 12, 'K': 13, 'A': 14
  };
  return values[rank];
}
