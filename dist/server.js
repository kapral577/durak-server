"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// server.ts - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –°–¢–ê–ë–ò–õ–¨–ù–´–• WEBSOCKET –°–û–ï–î–ò–ù–ï–ù–ò–ô
const ws_1 = __importDefault(require("ws"));
const http_1 = __importDefault(require("http"));
const RoomManager_1 = require("./logic/RoomManager");
class DurakGameServer {
    constructor() {
        this.authenticatedClients = new Map();
        this.heartbeatInterval = null; // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        this.port = parseInt(process.env.PORT || '3001');
        // ‚úÖ HTTP –°–ï–†–í–ï–† –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
        this.server = http_1.default.createServer((req, res) => {
            // ‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Telegram-Init-Data');
            // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
            if (req.method === 'OPTIONS') {
                res.writeHead(200);
                res.end();
                return;
            }
            // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê POST /auth/telegram
            if (req.method === 'POST' && req.url === '/auth/telegram') {
                this.handleTelegramAuthHTTP(req, res);
                return;
            }
            // –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({
                status: 'Durak Game Server is running',
                timestamp: new Date().toISOString(),
                connectedClients: this.authenticatedClients.size,
                serverUptime: process.uptime()
            }));
        });
        // ‚úÖ –ü–†–ò–í–Ø–ó–´–í–ê–ï–ú WebSocket –ö HTTP –°–ï–†–í–ï–†–£
        this.wss = new ws_1.default.Server({
            server: this.server,
            verifyClient: (info) => {
                const allowedOrigins = [
                    process.env.FRONTEND_URL,
                    'https://durakapp.vercel.app',
                    'https://durakapp-nyph.vercel.app',
                    'https://web.telegram.org',
                    'https://telegram.org',
                    'localhost:3000'
                ].filter(Boolean);
                const origin = info.origin;
                console.log('üîç WebSocket connection from origin:', origin);
                if (!origin)
                    return true;
                return allowedOrigins.some(allowed => allowed && origin.includes(allowed.replace('https://', '')));
            }
        });
        this.roomManager = new RoomManager_1.RoomManager();
        this.setupServer();
        console.log(`üöÄ Durak Game Server running on port ${this.port}`);
        console.log(`üì± Frontend URL: ${process.env.FRONTEND_URL || 'Not set'}`);
        console.log(`ü§ñ Bot Token: ${process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ Set' : '‚ùå Missing'}`);
    }
    // ‚úÖ HTTP –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –î–õ–Ø TELEGRAM MINI APPS
    handleTelegramAuthHTTP(req, res) {
        console.log('üîê HTTP Telegram authentication attempt');
        let body = '';
        req.on('data', (chunk) => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                const { initData, user } = JSON.parse(body);
                console.log('üìÑ Received auth data:', { userExists: !!user, initDataLength: initData?.length || 0 });
                // –í development —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if (process.env.NODE_ENV === 'development' && user?.id < 1000000) {
                    console.log('üß™ Development mode: accepting test user via HTTP');
                    const authToken = `http_token_${user.id}_${Date.now()}`;
                    const player = {
                        id: `tg_${user.id}`,
                        name: user.first_name + (user.last_name ? ` ${user.last_name}` : ''),
                        telegramId: user.id,
                        username: user.username,
                        avatar: user.photo_url,
                        isReady: false
                    };
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({
                        success: true,
                        token: authToken,
                        player: player
                    }));
                    console.log(`‚úÖ HTTP Auth successful: ${user.first_name} (${user.id})`);
                    return;
                }
                // –í production –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è initData
                if (!user) {
                    console.log('‚ùå No user data provided');
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({
                        success: false,
                        error: 'Invalid user data'
                    }));
                    return;
                }
                // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ production –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é initData)
                const authToken = `http_token_${user.id}_${Date.now()}`;
                const player = {
                    id: `tg_${user.id}`,
                    name: user.first_name + (user.last_name ? ` ${user.last_name}` : ''),
                    telegramId: user.id,
                    username: user.username,
                    avatar: user.photo_url,
                    isReady: false
                };
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({
                    success: true,
                    token: authToken,
                    player: player
                }));
                console.log(`‚úÖ HTTP Auth successful: ${user.first_name} (${user.id})`);
            }
            catch (error) {
                console.error('‚ùå HTTP Auth error:', error);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({
                    success: false,
                    error: 'Internal server error'
                }));
            }
        });
    }
    setupServer() {
        this.wss.on('connection', this.handleConnection.bind(this));
        // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô HEARTBEAT - –ö–ê–ñ–î–´–ï 60 –°–ï–ö–£–ù–î (–Ω–µ 30)
        this.heartbeatInterval = setInterval(() => {
            console.log(`üíì Heartbeat check: ${this.authenticatedClients.size} clients`);
            this.authenticatedClients.forEach((client, socket) => {
                if (socket.readyState === ws_1.default.OPEN) {
                    // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ò–ô HEARTBEAT –û–¢ –ö–õ–ò–ï–ù–¢–ê
                    const timeSinceLastHeartbeat = Date.now() - client.lastHeartbeat.getTime();
                    if (timeSinceLastHeartbeat > 120000) { // 2 –º–∏–Ω—É—Ç—ã –±–µ–∑ heartbeat
                        console.log(`‚è∞ Client ${client.telegramUser.first_name} heartbeat timeout, disconnecting`);
                        socket.close(4000, 'Heartbeat timeout');
                    }
                    else {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
                        socket.ping();
                    }
                }
                else {
                    console.log(`üîå Removing dead socket for ${client.telegramUser.first_name}`);
                    this.handleDisconnection(socket);
                }
            });
        }, 60000); // ‚úÖ 60 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 30
        // ‚úÖ –ó–ê–ü–£–°–ö–ê–ï–ú HTTP –°–ï–†–í–ï–†
        this.server.listen(this.port, () => {
            console.log(`‚úÖ HTTP + WebSocket server listening on port ${this.port}`);
        });
        // Graceful shutdown
        process.on('SIGTERM', this.shutdown.bind(this));
        process.on('SIGINT', this.shutdown.bind(this));
    }
    handleConnection(socket) {
        console.log('üîå New WebSocket connection attempt');
        const authTimeout = setTimeout(() => {
            console.log('‚è∞ WebSocket authentication timeout');
            socket.close(4001, 'Authentication timeout');
        }, 15000); // ‚úÖ 15 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 10
        socket.on('message', (data) => {
            try {
                const message = JSON.parse(data.toString());
                if (message.type === 'authenticate') {
                    clearTimeout(authTimeout);
                    this.handleAuthentication(socket, message);
                }
                else {
                    const client = this.authenticatedClients.get(socket);
                    if (!client) {
                        socket.send(JSON.stringify({
                            type: 'error',
                            message: 'Authentication required'
                        }));
                        return;
                    }
                    // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú HEARTBEAT –ü–†–ò –õ–Æ–ë–û–ú –°–û–û–ë–©–ï–ù–ò–ò
                    client.lastHeartbeat = new Date();
                    this.handleAuthenticatedMessage(client, message);
                }
            }
            catch (error) {
                console.error('‚ùå WebSocket message parsing error:', error);
                socket.send(JSON.stringify({
                    type: 'error',
                    message: 'Invalid message format'
                }));
            }
        });
        socket.on('close', (code, reason) => {
            clearTimeout(authTimeout);
            this.handleDisconnection(socket);
            console.log(`üîå WebSocket connection closed: ${code} ${reason.toString()}`);
        });
        socket.on('error', (error) => {
            console.error('‚ùå WebSocket error:', error);
            this.handleDisconnection(socket);
        });
        // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê PONG –û–¢ –ö–õ–ò–ï–ù–¢–ê
        socket.on('pong', () => {
            const client = this.authenticatedClients.get(socket);
            if (client) {
                client.lastHeartbeat = new Date();
                console.log(`üíì Pong received from ${client.telegramUser.first_name}`);
            }
        });
    }
    handleAuthentication(socket, message) {
        console.log('üîê WebSocket authentication attempt');
        // –í development —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (process.env.NODE_ENV === 'development' && message.telegramUser?.id < 1000000) {
            console.log('üß™ Development mode: accepting test user via WebSocket');
            this.createAuthenticatedClient(socket, message.telegramUser, 'dev_token');
            return;
        }
        // –í production –ø—Ä–æ–≤–µ—Ä—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ
        const telegramUser = message.telegramUser;
        if (!telegramUser) {
            console.log('‚ùå Invalid Telegram authentication');
            socket.send(JSON.stringify({
                type: 'error',
                message: 'Invalid Telegram authentication'
            }));
            socket.close(4002, 'Authentication failed');
            return;
        }
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è initData
        const authToken = `ws_token_${telegramUser.id}_${Date.now()}`;
        this.createAuthenticatedClient(socket, telegramUser, authToken);
    }
    createAuthenticatedClient(socket, telegramUser, authToken) {
        const playerId = `tg_${telegramUser.id}`;
        // ‚úÖ –î–û–ë–ê–í–õ–ï–ù lastHeartbeat
        const client = {
            socket,
            telegramUser,
            authToken,
            playerId,
            lastHeartbeat: new Date() // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        };
        this.authenticatedClients.set(socket, client);
        socket.send(JSON.stringify({
            type: 'authenticated',
            player: {
                id: playerId,
                name: telegramUser.first_name + (telegramUser.last_name ? ` ${telegramUser.last_name}` : ''),
                telegramId: telegramUser.id,
                username: telegramUser.username,
                avatar: telegramUser.photo_url,
                isReady: false
            },
            token: authToken
        }));
        console.log(`‚úÖ WebSocket user authenticated: ${telegramUser.first_name} (${telegramUser.id})`);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        this.roomManager.sendRoomsList(socket);
    }
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
    handleAuthenticatedMessage(client, message) {
        console.log(`üì® Message from ${client.telegramUser.first_name}: ${message.type}`);
        // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê HEARTBEAT –°–û–û–ë–©–ï–ù–ò–ô
        if (message.type === 'heartbeat') {
            client.lastHeartbeat = new Date();
            client.socket.send(JSON.stringify({
                type: 'heartbeat_response',
                timestamp: Date.now()
            }));
            return;
        }
        const enrichedMessage = {
            ...message,
            playerId: client.playerId,
            telegramUser: client.telegramUser // ‚úÖ –£–ñ–ï –ï–°–¢–¨ - –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ RoomManager
        };
        this.roomManager.handleMessage(client.socket, enrichedMessage);
    }
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ö–õ–Æ–ß–ï–ù–ò–ô
    handleDisconnection(socket) {
        const client = this.authenticatedClients.get(socket);
        if (client) {
            console.log(`‚ùå User disconnected: ${client.telegramUser.first_name} (${client.playerId})`);
            // ‚úÖ –£–í–ï–î–û–ú–õ–Ø–ï–ú ROOMMANAGER –û DISCONNECT (–ù–ï LEAVE)
            this.roomManager.handleDisconnection(socket);
            this.authenticatedClients.delete(socket);
            console.log(`üìä Remaining clients: ${this.authenticatedClients.size}`);
        }
    }
    shutdown() {
        console.log('üõë Shutting down server...');
        // ‚úÖ –û–ß–ò–°–¢–ö–ê HEARTBEAT INTERVAL
        if (this.heartbeatInterval) {
            clearInterval(this.heartbeatInterval);
        }
        this.wss.close(() => {
            this.server.close(() => {
                console.log('‚úÖ Server shut down gracefully');
                process.exit(0);
            });
        });
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    getServerStats() {
        return {
            connectedClients: this.authenticatedClients.size,
            totalConnections: this.wss.clients.size,
            serverUptime: process.uptime(),
            ...this.roomManager.getStats()
        };
    }
}
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
new DurakGameServer();
